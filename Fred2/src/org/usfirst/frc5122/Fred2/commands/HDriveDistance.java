// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5122.Fred2.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc5122.Fred2.Robot;
import org.usfirst.frc5122.Fred2.RobotMap;

/**
 *
 */
public class  HDriveDistance extends Command {
	double forward_m, turn_m, strafe_m,
		org, orgT, orgS;

	
    public HDriveDistance(double forward, double turn, double strafe) {
        //forward is in inches
    	// Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	System.out.println("Initializing");
    	org = Math.abs(RobotMap.driveLeftEncoder.getDistance());
    	orgS = Math.abs(RobotMap.driveStrafeEncoder.getDistance());
    	orgT = RobotMap.drivegyro.getAngle();
    	
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(forward_m > 0){
    		Robot.drive.hDrive(-0.75,0,0);
    		System.out.println("Driving forward");
    	}else if(strafe_m > 0){
    		Robot.drive.hDrive(0,0,0.75);
    		System.out.println("Strafeing");
    	}else if(strafe_m < 0){
    		Robot.drive.hDrive(0,0,-0.75);
    		System.out.println("Strafeing");
    	}else if(turn_m > 0){
    		Robot.drive.hDrive(0, 0.65, 0);
    		System.out.println("Turning");
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if(forward_m != 0){
    		return (forward_m <= (RobotMap.driveLeftEncoder.getDistance() - org));
    	}else if(strafe_m > 0){
    		return (strafe_m >= (Math.abs(RobotMap.driveStrafeEncoder.getDistance()) - orgS));
    	}else if(strafe_m < 0){
    		return (strafe_m <= (Math.abs(RobotMap.driveStrafeEncoder.getDistance()) - orgS));
    	}else if(turn_m > 0){
    		return (turn_m <= (RobotMap.drivegyro.getAngle() - orgT));
    	}else{
    		return false;
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("EndingDriving");
    	Robot.drive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
